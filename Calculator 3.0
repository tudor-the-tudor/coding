#I had ChatGPT make a full interactive calculator
import tkinter as tk
from tkinter import messagebox
import math

class ScientificCalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("Scientific Calculator")
        self.expression = ""
        self.history = []

        self.entry = tk.Entry(root, font=('Arial', 20), borderwidth=5, relief="ridge", justify='right')
        self.entry.grid(row=0, column=0, columnspan=6, ipadx=10, ipady=10, pady=10, padx=10)
        self.entry.bind("<Key>", self.key_input)

        # History display
        self.history_text = tk.Text(root, height=5, width=35, state='disabled', font=('Arial', 10))
        self.history_text.grid(row=1, column=0, columnspan=6, padx=10)

        # Buttons layout
        buttons = [
            ('7', 2, 0), ('8', 2, 1), ('9', 2, 2), ('/', 2, 3), ('C', 2, 4), ('√', 2, 5),
            ('4', 3, 0), ('5', 3, 1), ('6', 3, 2), ('*', 3, 3), ('(', 3, 4), ('^', 3, 5),
            ('1', 4, 0), ('2', 4, 1), ('3', 4, 2), ('-', 4, 3), (')', 4, 4), ('%', 4, 5),
            ('0', 5, 0), ('.', 5, 1), ('=', 5, 2), ('+', 5, 3), ('log', 5, 4), ('ln', 5, 5),
            ('sin', 6, 0), ('cos', 6, 1), ('tan', 6, 2), ('Clear History', 6, 3, 3)
        ]

        for btn in buttons:
            text = btn[0]
            row = btn[1]
            col = btn[2]
            colspan = btn[3] if len(btn) == 4 else 1
            tk.Button(root, text=text, width=7, height=2, font=('Arial', 12),
                      command=lambda val=text: self.on_button_click(val))\
                .grid(row=row, column=col, columnspan=colspan, sticky="nsew", padx=3, pady=3)

    def on_button_click(self, value):
        if value == "=":
            try:
                expr = self.expression.replace('√', 'math.sqrt').replace('^', '**') \
                    .replace('log', 'math.log10').replace('ln', 'math.log') \
                    .replace('sin', 'math.sin').replace('cos', 'math.cos').replace('tan', 'math.tan') \
                    .replace('%', '/100')

                result = str(eval(expr, {"math": math}))
                self.update_history(f"{self.expression} = {result}")
                self.entry.delete(0, tk.END)
                self.entry.insert(0, result)
                self.expression = result
            except Exception as e:
                self.entry.delete(0, tk.END)
                self.entry.insert(0, "Error")
                self.expression = ""
        elif value == "C":
            self.expression = ""
            self.entry.delete(0, tk.END)
        elif value == "Clear History":
            self.history = []
            self.update_history()
        else:
            self.expression += value
            self.entry.delete(0, tk.END)
            self.entry.insert(0, self.expression)

    def update_history(self, new_entry=None):
        if new_entry:
            self.history.append(new_entry)
        self.history_text.config(state='normal')
        self.history_text.delete(1.0, tk.END)
        for item in reversed(self.history[-10:]):
            self.history_text.insert(tk.END, item + "\n")
        self.history_text.config(state='disabled')

    def key_input(self, event):
        key = event.char
        if key in '0123456789+-*/().%^':
            self.expression += key
            self.entry.delete(0, tk.END)
            self.entry.insert(0, self.expression)
        elif event.keysym == "Return":
            self.on_button_click("=")
        elif event.keysym == "BackSpace":
            self.expression = self.expression[:-1]
            self.entry.delete(0, tk.END)
            self.entry.insert(0, self.expression)

if __name__ == "__main__":
    root = tk.Tk()
    app = ScientificCalculator(root)
    root.mainloop()
#The sqrt, tan, log and etc. don't really work (it shows 'error'). Otherwise this is crazy.